apply plugin: 'maven-publish'
apply plugin: 'signing'

group = GROUP
version = VERSION_NAME

if (hasSonatypeCredentials()) {
    afterEvaluate {
        publishing {
            publications {
                release(MavenPublication) {
                    groupId = GROUP
                    artifactId = POM_ARTIFACT_ID
                    version = VERSION_NAME
                    artifact(mavenPublishSourcesJar)
                    artifact(mavenPublishJavadocsJar)
                    pom {
                        name = POM_NAME
                        description = POM_DESCRIPTION
                        url = POM_URL
                        packaging = POM_PACKAGING
                        scm {
                            connection = POM_SCM_CONNECTION
                            developerConnection = POM_SCM_DEV_CONNECTION
                            url = POM_SCM_URL
                        }
                        licenses {
                            license {
                                name = 'MIT License'
                                url = 'https://opensource.org/licenses/MIT'
                            }
                        }
                        developers {
                            developer {
                                id = 'int02h'
                                name = 'Daniil Popov'
                                email = 'int02h@gmail.com'
                            }
                        }
                    }
                }
            }
            repositories {
                maven {
                    def releasesRepoUrl = layout.buildDirectory.dir('https://oss.sonatype.org/service/local/staging/deploy/maven2/')
                    def snapshotsRepoUrl = layout.buildDirectory.dir('https://oss.sonatype.org/content/repositories/snapshots/')
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    credentials {
                        username sonatypeUsername
                        password sonatypePassword
                    }
                }
            }
        }

        signing {
            sign publishing.publications.release
        }
    }
}

private hasSonatypeCredentials() {
    return hasProperty('sonatypeUsername') && hasProperty('sonatypePassword')
}